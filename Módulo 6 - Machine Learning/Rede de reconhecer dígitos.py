# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L63jf5s9OvFYDioyHJq80aby6I-ENRn0
"""

import numpy as np
import torch
import torch.nn.functional as F
import torchvision
import matplotlib.pyplot as plt
from time import time
from torchvision import datasets, transforms
from torch import nn, optim

transform = transforms.ToTensor()

trainset = datasets.MNIST('./MNIST_data/', download=True, train=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True)

valset = datasets.MNIST('./MNIST_data/', download=True, train=False, transform=transform)
valloader = torch.utils.data.DataLoader(valset, batch_size=64, shuffle=True)

dataiter = iter(trainloader)
imagens, etiquetas = next(dataiter)
plt.imshow(imagens[0].numpy().squeeze(), cmap='gray_r')

print(imagens[0].shape) #verifica as dimensões de cada imagem
print(etiquetas[0].shape) #dimensões da etiqueta

class Modelo(nn.Module):
  def __init__(self):
    super(Modelo, self).__init__()
    self.linear1 = nn.Linear(28*28, 128) # Camada de entrada, 728 neurônios que se ligam a 128
    self.linear2 = nn.Linear(128, 64) # camada interna 1, 128 neuronios que se ligam a 64
    self.linear3 = nn.Linear(64, 10) # camada interna 2, 64 neuronios que se ligam a 10

  def forward(self, X):
    X = F.relu(self.linear1(X)) #função de ativação da camada de entrada para a camada inerna 1
    X = F.relu(self.linear2(X)) # Função de ativação da camada interna 1 para a camada interna 2
    X = self.linear3(X) # função de ativação de camada interna 2 para a camada de saída, nesse caso f(x)=x
    return F.log_softmax(X, dim=1) # dados utilizados para calcular a perda

# otimizador
def treino (modelo, trainloader, device):
  otimizador = optim.SGD(modelo.parameters(), lr=0.01, momentum=0.5)
  inicio = time()

  criterio = nn.NLLLoss() # Define criterio para calcular a perda
  EPOCHS = 10 #numero de epochs que o algoritmo roda
  modelo.train() #ativa o modo de treinamento do modelo

  for epoch in range(EPOCHS):
    perda_acumulada = 0 #inicializa perda acumulada da epoch

    for imagens, etiquetas in trainloader:
      imagens = imagens.view(imagens.shape[0], -1) #converte imagens para vetores
      otimizador.zerp_grad() #zera os gradientes por conta do ciclo anterior

      output = modelo(imagens.to(device)) #coloca os dados no modelo
      perda_instantanea = criterio(output, etiquetas.to(device))

      perda_instantanea.backward() # backpropagation a partir da perda

      otimizador.step() #atualizando os pesos e bias

      perda_acumulada += perda_instantanea.item()


    else:
      print("Epoch {} - Perda resultante: {}".format(epoch+1, perda_acumulada/len(trainloader)))
  print("\nTempo de treino (em minutos) =", (time()-inicio)/60)

def validacao(modelo, valloader, device):
  conta_corretas, conta_todas = 0, 0
  for imagens, etiquetas in valloader:
    for i in range(len(etiquetas)):
      img = imagens[i].view(1, 784)

      with torch.no_grad():
        logps = modelo(img.to(device))

      ps = torch.exp(logps)
      probab = list(ps.cpu().numpy()[0])
      etiqueta_pred = probab.index(max(probab))
      etiqueta_certa = etiquetas.numpy()[i]
      if(etiqueta_certa == etiqueta_pred):
        conta_corretas += 1
      conta_todas += 1

  print("Total de imagens testadas =", conta_todas)
  print("\nPrecisão do modelo = {}".format(conta_corretas*100/conta_todas))

modelo = Modelo()

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
modelo.to(device)

